using Konamiman.PocketZ80;
using Konamiman.TlsForZ80.TlsClient.Enums;
using Konamiman.TLSforZ80.Tests;
using NUnit.Framework;
using System.Security.Cryptography;
using System.Text;

namespace Konamiman.TLSforZ80.TlsConsole;

public class TlsConnectionTests : TestBase
{
    const byte STATE_INITIAL = 0;
    const byte STATE_HANDSHAKE = 1;
    const byte STATE_ESTABLISHED = 2;
    const byte STATE_LOCALLY_CLOSED = 3;
    const byte STATE_REMOTELY_CLOSED = 4;
    const byte STATE_FULLY_CLOSED = 5;

    [Test]
    public void TestSendPlainRecord()
    {
        RunInit();
        byte[] data = [1, 2, 3, 4, 5];
        WriteToMemory(0xF000, data);

        Z80.Registers.A = 34;
        Z80.Registers.HL = 0xF000.ToShort();
        Z80.Registers.BC = data.Length.ToShort();

        Run("TLS_CONNECTION.SEND_RECORD");

        Assert.That(tcpDataSent, Is.EqualTo([34, 3, 3, 0, (byte)data.Length, ..data ]));
    }

    [Test]
    public void TestSendPlainAlertRecord()
    {
        RunInit();
        Z80.Registers.A = 34;

        Run("TLS_CONNECTION.SEND_ALERT_RECORD");

        Assert.That(tcpDataSent, Is.EqualTo([TLS_RECORD_TYPE_ALERT, 3, 3, 0, 2, 2, 34]));
    }

    [Test]
    public void TestSendPlainHandshakeRecord()
    {
        RunInit();
        byte[] data = [1, 2, 3, 4, 5];
        byte[] dataWithHeader = [34, 0, 0, (byte)data.Length, ..data];
        WriteToMemory(0xF000, dataWithHeader);

        Z80.Registers.HL = 0xF000.ToShort();

        Run("TLS_CONNECTION.SEND_HANDSHAKE_RECORD");

        Assert.That(tcpDataSent, Is.EqualTo([TLS_RECORD_TYPE_HANDSHAKE, 3, 3, 0, (byte)dataWithHeader.Length, .. dataWithHeader]));
    }

    [Test]
    public void InitInitializesEverything()
    {
        Run("TLS_CONNECTION.INIT");

        AssertByteInMemory("TLS_CONNECTION.STATE", STATE_INITIAL);
        AssertByteInMemory("TLS_CONNECTION.ERROR_CODE", 0);
        AssertByteInMemory("TLS_CONNECTION.ALERT_SENT", 0);
        AssertByteInMemory("TLS_CONNECTION.ALERT_RECEIVED", 0);
    }

    [Test]
    public void RemoteCloseAfterInitClosesWithoutSendingAlert()
    {
        Run("TLS_CONNECTION.INIT");

        tcpConnectionIsRemotelyClosed = true;

        Run("TLS_CONNECTION.UPDATE");
        Assert.That(tcpDataSent, Is.Empty);
        AssertByteInMemory("TLS_CONNECTION.STATE", STATE_FULLY_CLOSED);
        AssertA(STATE_FULLY_CLOSED);
        Assert.That(tcpConnectionIsLocallyClosed, Is.True);
    }

    [Test]
    public void LocalCloseAfterInitClosesWithoutSendingAlert()
    {
        Run("TLS_CONNECTION.INIT");

        Run("TLS_CONNECTION.CLOSE");
        Assert.That(tcpDataSent, Is.Empty);
        AssertByteInMemory("TLS_CONNECTION.STATE", STATE_LOCALLY_CLOSED);
        AssertA(STATE_LOCALLY_CLOSED);
        Assert.That(tcpConnectionIsLocallyClosed, Is.True);

        // Now simulate another update after peer has closed too

        tcpConnectionIsRemotelyClosed = true;
        Run("TLS_CONNECTION.UPDATE");
        Assert.That(tcpDataSent, Is.Empty);
        AssertByteInMemory("TLS_CONNECTION.STATE", STATE_FULLY_CLOSED);
        AssertA(STATE_FULLY_CLOSED);
    }

    [Test]
    public void UpdateAfterInitSendsClientHello()
    {
        var serverName = "server.com";
        RunInit(serverName);
        Run("TLS_CONNECTION.UPDATE");
        AssertByteInMemory("TLS_CONNECTION.STATE", STATE_HANDSHAKE);
        AssertA(STATE_HANDSHAKE);

        var clientHelloSize = GetWordFromMemory("CLIENT_HELLO.SIZE") + 4;
        var clientHelloBytes = ReadFromMemory(symbols["CLIENT_HELLO.MESSAGE_HEADER"], clientHelloSize);

        Assert.That(
            tcpDataSent.ToArray(), 
            Is.EqualTo((byte[])
                [ TLS_RECORD_TYPE_HANDSHAKE, 3, 1, (byte)((clientHelloSize & 0xFF00)>>8), (byte)(clientHelloSize & 0xFF), .. clientHelloBytes]
            ));

        var serverNameBytes = Encoding.ASCII.GetBytes(serverName);
        Assert.That(ReadFromMemory(symbols["CLIENT_HELLO.SERVER_NAME"], serverNameBytes.Length), Is.EqualTo(serverNameBytes));
    }

    [Test]
    public void InitSendsPublicKeyToClientHello()
    {
        short publicKeyAddressReceivedByClientHelloInit = 0;

        watcher
            .BeforeFetchingInstructionAt("CLIENT_HELLO.INIT")
            .Do(context => {
                publicKeyAddressReceivedByClientHelloInit = context.Z80.Registers.DE;
            })
            .ExecuteRet();

        watcher.BeforeFetchingInstructionAt("P256.GENERATE_KEY_PAIR")
            .Do(context => {
                context.Z80.Registers.HL = 0x1234;
            })
            .ExecuteRet();

        RunInit();
        Assert.That(publicKeyAddressReceivedByClientHelloInit, Is.EqualTo(0x1234));
    }

    [Test]
    public void ChangeCipherSpecIsIgnoredDuringHandshake()
    {
        RunInit();
        Run("TLS_CONNECTION.UPDATE");

        ReceivedTcpData = [
            [
               TLS_RECORD_TYPE_CHANGE_CIHPER_SPEC,
               3, 3,
               0, 1, //Length
               34
            ]
        ];

        Run("TLS_CONNECTION.UPDATE");
        AssertA(STATE_HANDSHAKE);
    }

    [Test]
    public void UnexpectedRecordCausesErrorDuringHandshake()
    {
        RunInit();
        Run("TLS_CONNECTION.UPDATE");

        ReceivedTcpData = [
            [
               34,
               3, 3,
               0, 1, //Length
               89
            ]
        ];

        Run("TLS_CONNECTION.UPDATE");
        AssertA(STATE_LOCALLY_CLOSED);
        AssertByteInMemory("TLS_CONNECTION.ERROR_CODE", symbols["TLS_CONNECTION.ERROR_CODE.UNEXPECTED_RECORD_TYPE_IN_HANDSHAKE"]);
        AssertByteInMemory("TLS_CONNECTION.SUB_ERROR_CODE", 34);
    }

    [Test]
    public void RecordReceiverErrorCausesErrorDuringHandshake()
    {
        watcher
            .BeforeFetchingInstructionAt("RECORD_RECEIVER.UPDATE")
            .Do(context => {
                context.Z80.Registers.A = 3; //Bad record MAC
            })
            .ExecuteRet();

        RunInit();
        Run("TLS_CONNECTION.UPDATE");
        Run("TLS_CONNECTION.UPDATE");

        AssertA(STATE_LOCALLY_CLOSED);
        AssertByteInMemory("TLS_CONNECTION.ERROR_CODE", symbols["TLS_CONNECTION.ERROR_CODE.RECEIVED_RECORD_DECODE_ERROR"]);
        AssertByteInMemory("TLS_CONNECTION.SUB_ERROR_CODE", 3);
        AssertByteInMemory("TLS_CONNECTION.ALERT_SENT", 20); //BAD_RECORD_MAC
    }

    [Test]
    public void AlertRecordCausesConnectionCloseDuringHandshake()
    {
        RunInit();
        Run("TLS_CONNECTION.UPDATE");

        ReceivedTcpData = [
            [
               TLS_RECORD_TYPE_ALERT,
               3, 3,
               0, 2, // Length
               1, 34
            ]
        ];

        Run("TLS_CONNECTION.UPDATE");
        AssertA(STATE_LOCALLY_CLOSED);
        AssertByteInMemory("TLS_CONNECTION.ERROR_CODE", symbols["TLS_CONNECTION.ERROR_CODE.ALERT_RECEIVED"]);
        AssertByteInMemory("TLS_CONNECTION.ALERT_RECEIVED", 34);
    }

    [Test]
    public void AlertRecordOfTypeCloseNotifyCausesFullCloseDuringHandshake()
    {
        RunInit();
        Run("TLS_CONNECTION.UPDATE");

        ReceivedTcpData = [
            [
               TLS_RECORD_TYPE_ALERT,
               3, 3,
               0, 2, // Length
               1, 0  // 0 = Close notify
            ]
        ];

        Run("TLS_CONNECTION.UPDATE");
        AssertA(STATE_FULLY_CLOSED);
        AssertByteInMemory("TLS_CONNECTION.ERROR_CODE", symbols["TLS_CONNECTION.ERROR_CODE.ALERT_RECEIVED"]);
        AssertByteInMemory("TLS_CONNECTION.ALERT_RECEIVED", 0);
    }

    [Test]
    public void TestHelloExchange()
    {
        // This test uses data dumps from a real connection

        var clientHelloBytes = new byte[] {
             0x03,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
             0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
             0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
             0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
             0x00,0x00,0x00,0x00,0x02,0x13,0x01,0x01,0x00,0x00,0x85,0x00,0x2B,0x00,0x03,0x02,
             0x03,0x04,0x00,0x01,0x00,0x01,0x01,0x00,0x0A,0x00,0x04,0x00,0x02,0x00,0x17,0x00,
             0x33,0x00,0x47,0x00,0x45,0x00,0x17,0x00,0x41,0x04,0x6B,0x17,0xD1,0xF2,0xE1,0x2C,
             0x42,0x47,0xF8,0xBC,0xE6,0xE5,0x63,0xA4,0x40,0xF2,0x77,0x03,0x7D,0x81,0x2D,0xEB,
             0x33,0xA0,0xF4,0xA1,0x39,0x45,0xD8,0x98,0xC2,0x96,0x4F,0xE3,0x42,0xE2,0xFE,0x1A,
             0x7F,0x9B,0x8E,0xE7,0xEB,0x4A,0x7C,0x0F,0x9E,0x16,0x2B,0xCE,0x33,0x57,0x6B,0x31,
             0x5E,0xCE,0xCB,0xB6,0x40,0x68,0x37,0xBF,0x51,0xF5,0x00,0x0D,0x00,0x0E,0x00,0x0C,
             0x04,0x01,0x05,0x01,0x08,0x04,0x08,0x05,0x04,0x03,0x05,0x03,0x00,0x00,0x00,0x10,
             0x00,0x0E,0x00,0x00,0x0B,0x74,0x6C,0x73,0x31,0x33,0x2E,0x31,0x64,0x2E,0x70,0x77
        };

        var serverHelloBytes = new byte[] {
             0x03,0x03,0xDE,0xAD,0xDE,0xAD,0xDE,0xAD,0xC0,0xDE,0x00,0x00,0x00,0x00,0x00,0x00,
             0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
             0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
             0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
             0x00,0x00,0x00,0x13,0x01,0x00,0x00,0x4F,0x00,0x33,0x00,0x45,0x00,0x17,0x00,0x41,
             0x04,0x1F,0xAD,0xAC,0x79,0x15,0x6E,0x08,0xC8,0x53,0x2C,0xE8,0x8D,0xF8,0x87,0x27,
             0x31,0x41,0xAC,0xE1,0x6E,0x44,0xE9,0xC2,0x68,0xCE,0x49,0x65,0x96,0xF4,0x1B,0x65,
             0xFA,0xF8,0x23,0x94,0x63,0x7B,0x6A,0xCF,0x00,0x4A,0xB2,0x53,0xF9,0x56,0xBD,0x2C,
             0xD6,0xCA,0x6C,0x9A,0xD8,0x45,0x4B,0xF1,0xFB,0xF2,0x81,0xA6,0xC5,0x4A,0x93,0xD9,
             0x9C,0x00,0x2B,0x00,0x02,0x03,0x04
        };

        watcher
            .BeforeFetchingInstructionAt("CLIENT_HELLO.INIT")
            .Do(context => {
                WriteToMemory(symbols["CLIENT_HELLO.MESSAGE"], clientHelloBytes);
                WriteWordToMemory(symbols["CLIENT_HELLO.MESSAGE_HEADER"] + 2, (ushort)clientHelloBytes.Length, highEndian: true);
                WriteWordToMemory(symbols["CLIENT_HELLO.SIZE"], (ushort)clientHelloBytes.Length);
                context.Z80.Registers.HL = symbols["CLIENT_HELLO.MESSAGE"].ToShort();
                context.Z80.Registers.BC = clientHelloBytes.Length.ToShort();
            })
            .ExecuteRet();

        ReceivedTcpData = [
            RecordFromHandshakeMessage(2, serverHelloBytes), //2 = ServerHello
        ];

        RunInit();
        Run("TLS_CONNECTION.UPDATE");
        Run("TLS_CONNECTION.UPDATE");

        AssertByteInMemory("TLS_CONNECTION.STATE", STATE_HANDSHAKE);
        AssertA(STATE_HANDSHAKE);
        AssertByteInMemory("TLS_CONNECTION.FLAGS", 1); // HAS_KEYS

        var handshakeHash = new byte[] {
            0x6A,0x78,0x6B,0x30,0x28,0x59,0xF3,0x3E,0x21,0x90,0x25,0x7C,0x8E,0xD1,0x9F,0x2F,
            0xEA,0x56,0xDC,0x82,0xB7,0xFF,0x06,0xBE,0x63,0x71,0xB6,0x4C,0x68,0x93,0x86,0xD2
        };

        AssertMemoryContents("TLS_CONNECTION.HANDSHAKE_HASH", handshakeHash);

        var sharedSecred = new byte[] {
             0x1F,0xAD,0xAC,0x79,0x15,0x6E,0x08,0xC8,0x53,0x2C,0xE8,0x8D,0xF8,0x87,0x27,0x31,
             0x41,0xAC,0xE1,0x6E,0x44,0xE9,0xC2,0x68,0xCE,0x49,0x65,0x96,0xF4,0x1B,0x65,0xFA
        };

        AssertMemoryContents("TLS_CONNECTION.SHARED_SECRET", sharedSecred);

        var clientKey = new byte[] {
            0x5A,0xBA,0x9C,0x64,0x33,0xC8,0x68,0xEC,0xD6,0x44,0xFB,0x52,0x3F,0x5A,0x33,0x2E
        };

        AssertMemoryContents("HKDF.CLIENT_KEY", clientKey);

        var serverKey = new byte[] {
            0x53,0xC7,0x08,0xE4,0x32,0x3B,0x0D,0x99,0xA3,0xE6,0x34,0x39,0x8E,0x07,0x25,0xC2
        };

        AssertMemoryContents("HKDF.SERVER_KEY", serverKey);
    }

    [Test]
    public void TestUnexpectedMessageDuringHandshake()
    {
        RunInit();
        Run("TLS_CONNECTION.UPDATE");

        ReceivedTcpData = [
            [
               TLS_RECORD_TYPE_HANDSHAKE,
               3, 3,
               0, 7, // Length
               34,
               0, 0, 3,
               1, 2, 3
            ]
        ];

        Run("TLS_CONNECTION.UPDATE");
        AssertA(STATE_LOCALLY_CLOSED);
        AssertByteInMemory("TLS_CONNECTION.ERROR_CODE", symbols["TLS_CONNECTION.ERROR_CODE.UNALLOWED_HANDSHAKE_TYPE_BEFORE_SERVER_HELLO"]);
        AssertByteInMemory("TLS_CONNECTION.SUB_ERROR_CODE", 34);
    }

    [Test]
    public void TestSecondServerHelloReceivedDuringHandshake()
    {
        RunInit();
        Run("TLS_CONNECTION.UPDATE");

        var serverHelloBytes = new byte[] {
             0x03,0x03,0xDE,0xAD,0xDE,0xAD,0xDE,0xAD,0xC0,0xDE,0x00,0x00,0x00,0x00,0x00,0x00,
             0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
             0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
             0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
             0x00,0x00,0x00,0x13,0x01,0x00,0x00,0x4F,0x00,0x33,0x00,0x45,0x00,0x17,0x00,0x41,
             0x04,0x1F,0xAD,0xAC,0x79,0x15,0x6E,0x08,0xC8,0x53,0x2C,0xE8,0x8D,0xF8,0x87,0x27,
             0x31,0x41,0xAC,0xE1,0x6E,0x44,0xE9,0xC2,0x68,0xCE,0x49,0x65,0x96,0xF4,0x1B,0x65,
             0xFA,0xF8,0x23,0x94,0x63,0x7B,0x6A,0xCF,0x00,0x4A,0xB2,0x53,0xF9,0x56,0xBD,0x2C,
             0xD6,0xCA,0x6C,0x9A,0xD8,0x45,0x4B,0xF1,0xFB,0xF2,0x81,0xA6,0xC5,0x4A,0x93,0xD9,
             0x9C,0x00,0x2B,0x00,0x02,0x03,0x04
        };

        ReceivedTcpData = [
            RecordFromHandshakeMessage(2, serverHelloBytes), //2 = ServerHello
            RecordFromHandshakeMessage(2, serverHelloBytes)
        ];

        Run("TLS_CONNECTION.UPDATE");   // First ServerHello received
        Run("TLS_CONNECTION.UPDATE");   // Second ServerHello received
        AssertA(STATE_LOCALLY_CLOSED);
        AssertByteInMemory("TLS_CONNECTION.ERROR_CODE", symbols["TLS_CONNECTION.ERROR_CODE.SECOND_SERVER_HELLO_RECEIVED"]);
        AssertByteInMemory("TLS_CONNECTION.ALERT_SENT", symbols["TLS_CONNECTION.ALERT_CODE.UNEXPECTED_MESSAGE"]);
    }

    [Test]
    public void ServerHelloParseErrorCausesErrorDuringHandshake()
    {
        RunInit();

        var serverHelloBytes = new byte[] {
             0x03,0x03,0xDE,0xAD,0xDE,0xAD,0xDE,0xAD,0xC0,0xDE,0x00,0x00,0x00,0x00,0x00,0x00,
             0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
             0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
             0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
             0x00,0x00,0x00,0x13,0x01,0x00,0x00,0x4F,0x00,0x33,0x00,0x45,0x00,0x17,0x00,0x41,
             0x04,0x1F,0xAD,0xAC,0x79,0x15,0x6E,0x08,0xC8,0x53,0x2C,0xE8,0x8D,0xF8,0x87,0x27,
             0x31,0x41,0xAC,0xE1,0x6E,0x44,0xE9,0xC2,0x68,0xCE,0x49,0x65,0x96,0xF4,0x1B,0x65,
             0xFA,0xF8,0x23,0x94,0x63,0x7B,0x6A,0xCF,0x00,0x4A,0xB2,0x53,0xF9,0x56,0xBD,0x2C,
             0xD6,0xCA,0x6C,0x9A,0xD8,0x45,0x4B,0xF1,0xFB,0xF2,0x81,0xA6,0xC5,0x4A,0x93,0xD9,
             0x9C,0x00,0x2B,0x00,0x02,0x03,0x04
        };

        ReceivedTcpData = [
            RecordFromHandshakeMessage(2, serverHelloBytes) //2 = ServerHello
        ];

        watcher
            .BeforeFetchingInstructionAt("SERVER_HELLO.PARSE")
            .Do(context => {
                context.Z80.Registers.A = 4; //Illegal parameter
            })
            .ExecuteRet();

        Run("TLS_CONNECTION.UPDATE");
        Run("TLS_CONNECTION.UPDATE");

        AssertA(STATE_LOCALLY_CLOSED);
        AssertByteInMemory("TLS_CONNECTION.ERROR_CODE", symbols["TLS_CONNECTION.ERROR_CODE.INVALID_SERVER_HELLO"]);
        AssertByteInMemory("TLS_CONNECTION.SUB_ERROR_CODE", 4);
        AssertByteInMemory("TLS_CONNECTION.ALERT_SENT", 47); //ILLEGAL_PARAMETER
    }

    private byte[] RecordFromHandshakeMessage(byte messageType, byte[] messageData)
    {
        return [
            TLS_RECORD_TYPE_HANDSHAKE,
            3, 3,
            (byte)((messageData.Length+4) >> 8),
            (byte)((messageData.Length+4) & 0xFF),
            messageType,
            0,
            (byte)(messageData.Length >> 8),
            (byte)(messageData.Length & 0xFF),
            ..messageData
        ];
    }

    [Test]
    [TestCase(true)]
    //[TestCase(false)]
    public void TestFinishedExchange(bool splitCertificateMessage)
    {
        // This test uses data dumps from a real connection

        var clientHelloBytes = new byte[] {
            0x03,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x02,0x13,0x01,0x01,0x00,0x00,0x85,0x00,0x2B,0x00,0x03,0x02,
            0x03,0x04,0x00,0x01,0x00,0x01,0x01,0x00,0x0A,0x00,0x04,0x00,0x02,0x00,0x17,0x00,
            0x33,0x00,0x47,0x00,0x45,0x00,0x17,0x00,0x41,0x04,0x6B,0x17,0xD1,0xF2,0xE1,0x2C,
            0x42,0x47,0xF8,0xBC,0xE6,0xE5,0x63,0xA4,0x40,0xF2,0x77,0x03,0x7D,0x81,0x2D,0xEB,
            0x33,0xA0,0xF4,0xA1,0x39,0x45,0xD8,0x98,0xC2,0x96,0x4F,0xE3,0x42,0xE2,0xFE,0x1A,
            0x7F,0x9B,0x8E,0xE7,0xEB,0x4A,0x7C,0x0F,0x9E,0x16,0x2B,0xCE,0x33,0x57,0x6B,0x31,
            0x5E,0xCE,0xCB,0xB6,0x40,0x68,0x37,0xBF,0x51,0xF5,0x00,0x0D,0x00,0x0E,0x00,0x0C,
            0x04,0x01,0x05,0x01,0x08,0x04,0x08,0x05,0x04,0x03,0x05,0x03,0x00,0x00,0x00,0x10,
            0x00,0x0E,0x00,0x00,0x0B,0x74,0x6C,0x73,0x31,0x33,0x2E,0x31,0x64,0x2E,0x70,0x77
        };

        var serverHelloBytes = new byte[] {
             0x03,0x03,0xDE,0xAD,0xDE,0xAD,0xDE,0xAD,0xC0,0xDE,0x00,0x00,0x00,0x00,0x00,0x00,
             0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
             0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
             0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
             0x00,0x00,0x00,0x13,0x01,0x00,0x00,0x4F,0x00,0x33,0x00,0x45,0x00,0x17,0x00,0x41,
             0x04,0x1F,0xAD,0xAC,0x79,0x15,0x6E,0x08,0xC8,0x53,0x2C,0xE8,0x8D,0xF8,0x87,0x27,
             0x31,0x41,0xAC,0xE1,0x6E,0x44,0xE9,0xC2,0x68,0xCE,0x49,0x65,0x96,0xF4,0x1B,0x65,
             0xFA,0xF8,0x23,0x94,0x63,0x7B,0x6A,0xCF,0x00,0x4A,0xB2,0x53,0xF9,0x56,0xBD,0x2C,
             0xD6,0xCA,0x6C,0x9A,0xD8,0x45,0x4B,0xF1,0xFB,0xF2,0x81,0xA6,0xC5,0x4A,0x93,0xD9,
             0x9C,0x00,0x2B,0x00,0x02,0x03,0x04
        };

        var encryptedExtensionsBytes = new byte[] { 0x00, 0x00 };

        var certificateBytes = new byte[] {
             0x00,0x00,0x0F,0x2E,0x00,0x03,0xC6,0x30,0x82,0x03,0xC2,0x30,0x82,0x03,0x4A,0xA0,
             0x03,0x02,0x01,0x02,0x02,0x12,0x06,0x46,0xAD,0x8B,0x0E,0x8B,0x18,0x89,0xE4,0x63,
             0x91,0x74,0x9E,0x38,0xF6,0xFD,0x5D,0xA0,0x30,0x0A,0x06,0x08,0x2A,0x86,0x48,0xCE,
             0x3D,0x04,0x03,0x03,0x30,0x32,0x31,0x0B,0x30,0x09,0x06,0x03,0x55,0x04,0x06,0x13,
             0x02,0x55,0x53,0x31,0x16,0x30,0x14,0x06,0x03,0x55,0x04,0x0A,0x13,0x0D,0x4C,0x65,
             0x74,0x27,0x73,0x20,0x45,0x6E,0x63,0x72,0x79,0x70,0x74,0x31,0x0B,0x30,0x09,0x06,
             0x03,0x55,0x04,0x03,0x13,0x02,0x45,0x36,0x30,0x1E,0x17,0x0D,0x32,0x35,0x30,0x33,
             0x32,0x31,0x31,0x37,0x32,0x37,0x32,0x35,0x5A,0x17,0x0D,0x32,0x35,0x30,0x36,0x31,
             0x39,0x31,0x37,0x32,0x37,0x32,0x34,0x5A,0x30,0x16,0x31,0x14,0x30,0x12,0x06,0x03,
             0x55,0x04,0x03,0x13,0x0B,0x74,0x6C,0x73,0x31,0x33,0x2E,0x31,0x64,0x2E,0x70,0x77,
             0x30,0x76,0x30,0x10,0x06,0x07,0x2A,0x86,0x48,0xCE,0x3D,0x02,0x01,0x06,0x05,0x2B,
             0x81,0x04,0x00,0x22,0x03,0x62,0x00,0x04,0xDE,0xAD,0xC0,0xDE,0xD7,0xCB,0xFB,0x7E,
             0xA3,0xBA,0x63,0x37,0x18,0x06,0x53,0x37,0xF9,0xD0,0xF7,0x4E,0x33,0x32,0x17,0x65,
             0xBC,0xDF,0xA9,0x0D,0xE7,0x28,0x42,0x80,0xF2,0x18,0x60,0x61,0xCE,0x79,0x26,0x8C,
             0x6D,0x8F,0xAA,0xBE,0xF5,0x33,0xE2,0xAF,0x93,0xC1,0x46,0x0D,0xC9,0xC0,0x2D,0xCA,
             0x87,0x30,0x7D,0xA8,0x7D,0xD4,0x42,0x2D,0xEC,0x34,0xA8,0xDC,0xD1,0xDB,0x9F,0x94,
             0x1D,0x54,0x44,0xC9,0xA4,0x07,0x5E,0x77,0xFB,0xFD,0x51,0x6D,0x26,0x80,0x35,0xCD,
             0xD1,0xE7,0x7E,0x4D,0x6B,0xBF,0x16,0x8F,0xA3,0x82,0x02,0x3D,0x30,0x82,0x02,0x39,
             0x30,0x0E,0x06,0x03,0x55,0x1D,0x0F,0x01,0x01,0xFF,0x04,0x04,0x03,0x02,0x07,0x80,
             0x30,0x1D,0x06,0x03,0x55,0x1D,0x25,0x04,0x16,0x30,0x14,0x06,0x08,0x2B,0x06,0x01,
             0x05,0x05,0x07,0x03,0x01,0x06,0x08,0x2B,0x06,0x01,0x05,0x05,0x07,0x03,0x02,0x30,
             0x0C,0x06,0x03,0x55,0x1D,0x13,0x01,0x01,0xFF,0x04,0x02,0x30,0x00,0x30,0x1D,0x06,
             0x03,0x55,0x1D,0x0E,0x04,0x16,0x04,0x14,0x9C,0xF4,0x01,0x55,0x63,0x1D,0x96,0xA5,
             0xA9,0xDB,0xAD,0x49,0xB7,0x6F,0x32,0xF9,0x02,0x47,0x46,0x99,0x30,0x1F,0x06,0x03,
             0x55,0x1D,0x23,0x04,0x18,0x30,0x16,0x80,0x14,0x93,0x27,0x46,0x98,0x03,0xA9,0x51,
             0x68,0x8E,0x98,0xD6,0xC4,0x42,0x48,0xDB,0x23,0xBF,0x58,0x94,0xD2,0x30,0x55,0x06,
             0x08,0x2B,0x06,0x01,0x05,0x05,0x07,0x01,0x01,0x04,0x49,0x30,0x47,0x30,0x21,0x06,
             0x08,0x2B,0x06,0x01,0x05,0x05,0x07,0x30,0x01,0x86,0x15,0x68,0x74,0x74,0x70,0x3A,
             0x2F,0x2F,0x65,0x36,0x2E,0x6F,0x2E,0x6C,0x65,0x6E,0x63,0x72,0x2E,0x6F,0x72,0x67,
             0x30,0x22,0x06,0x08,0x2B,0x06,0x01,0x05,0x05,0x07,0x30,0x02,0x86,0x16,0x68,0x74,
             0x74,0x70,0x3A,0x2F,0x2F,0x65,0x36,0x2E,0x69,0x2E,0x6C,0x65,0x6E,0x63,0x72,0x2E,
             0x6F,0x72,0x67,0x2F,0x30,0x16,0x06,0x03,0x55,0x1D,0x11,0x04,0x0F,0x30,0x0D,0x82,
             0x0B,0x74,0x6C,0x73,0x31,0x33,0x2E,0x31,0x64,0x2E,0x70,0x77,0x30,0x13,0x06,0x03,
             0x55,0x1D,0x20,0x04,0x0C,0x30,0x0A,0x30,0x08,0x06,0x06,0x67,0x81,0x0C,0x01,0x02,
             0x01,0x30,0x2D,0x06,0x03,0x55,0x1D,0x1F,0x04,0x26,0x30,0x24,0x30,0x22,0xA0,0x20,
             0xA0,0x1E,0x86,0x1C,0x68,0x74,0x74,0x70,0x3A,0x2F,0x2F,0x65,0x36,0x2E,0x63,0x2E,
             0x6C,0x65,0x6E,0x63,0x72,0x2E,0x6F,0x72,0x67,0x2F,0x33,0x33,0x2E,0x63,0x72,0x6C,
             0x30,0x82,0x01,0x05,0x06,0x0A,0x2B,0x06,0x01,0x04,0x01,0xD6,0x79,0x02,0x04,0x02,
             0x04,0x81,0xF6,0x04,0x81,0xF3,0x00,0xF1,0x00,0x76,0x00,0x4E,0x75,0xA3,0x27,0x5C,
             0x9A,0x10,0xC3,0x38,0x5B,0x6C,0xD4,0xDF,0x3F,0x52,0xEB,0x1D,0xF0,0xE0,0x8E,0x1B,
             0x8D,0x69,0xC0,0xB1,0xFA,0x64,0xB1,0x62,0x9A,0x39,0xDF,0x00,0x00,0x01,0x95,0xB9,
             0xF4,0x63,0x78,0x00,0x00,0x04,0x03,0x00,0x47,0x30,0x45,0x02,0x21,0x00,0xE0,0xAF,
             0x38,0xBD,0x69,0x3B,0x78,0x16,0x5E,0x84,0x10,0x31,0xE3,0xCA,0x43,0x5D,0x38,0x2F,
             0xFE,0xCC,0x24,0x1D,0x5C,0xF8,0x8A,0xE8,0x96,0x43,0x9F,0x55,0x49,0x29,0x02,0x20,
             0x21,0x36,0xD4,0x09,0x2E,0x8C,0x54,0x7D,0x88,0x7B,0x8F,0x40,0x4F,0x96,0x48,0xFA,
             0xF3,0xA2,0xA9,0x44,0x1D,0x58,0xC9,0x65,0x5B,0x09,0x39,0xD5,0x64,0x02,0xA9,0x5B,
             0x00,0x77,0x00,0xA2,0xE3,0x0A,0xE4,0x45,0xEF,0xBD,0xAD,0x9B,0x7E,0x38,0xED,0x47,
             0x67,0x77,0x53,0xD7,0x82,0x5B,0x84,0x94,0xD7,0x2B,0x5E,0x1B,0x2C,0xC4,0xB9,0x50,
             0xA4,0x47,0xE7,0x00,0x00,0x01,0x95,0xB9,0xF4,0x6B,0x3B,0x00,0x00,0x04,0x03,0x00,
             0x48,0x30,0x46,0x02,0x21,0x00,0xEC,0x55,0xE1,0xC8,0x6C,0x95,0xFA,0xD2,0x99,0x38,
             0x72,0x9E,0x74,0x0C,0x9F,0xF9,0x15,0xB0,0x70,0x8F,0x3B,0xEC,0x73,0x75,0x33,0x41,
             0xD2,0xF0,0x66,0x57,0xA9,0x3B,0x02,0x21,0x00,0x97,0x1A,0x14,0xCE,0x94,0x66,0x62,
             0x49,0x5E,0x80,0x04,0xAF,0x6E,0xC1,0x04,0x6C,0x70,0xB8,0xA4,0xFE,0x79,0x83,0x95,
             0xD7,0x52,0x48,0xA6,0x33,0x06,0x21,0x0E,0x4A,0x30,0x0A,0x06,0x08,0x2A,0x86,0x48,
             0xCE,0x3D,0x04,0x03,0x03,0x03,0x66,0x00,0x30,0x63,0x02,0x30,0x1E,0x5D,0xCB,0x4D,
             0x3A,0xFE,0xD2,0xD5,0xF9,0xE8,0x29,0x20,0x6C,0x50,0xE9,0x43,0x2E,0x09,0xFE,0xD6,
             0xB3,0xCD,0x67,0x2B,0x9D,0x76,0x01,0xA8,0x82,0xF9,0xE8,0x4F,0x70,0x48,0x35,0x9C,
             0x6D,0x65,0xDD,0x32,0x78,0x42,0x2B,0x00,0xAA,0xEE,0x3A,0xC1,0x02,0x2F,0x27,0xF8,
             0x22,0xCF,0x7F,0x30,0x64,0x6E,0x1B,0x44,0x61,0x81,0xD9,0x7A,0xED,0x1D,0x47,0x38,
             0x81,0x22,0x14,0x56,0xEC,0xF4,0x90,0xD0,0xB7,0x01,0xF1,0x24,0x2B,0x13,0x66,0x8C,
             0xD1,0xB3,0x35,0xA5,0x3D,0xB2,0xAA,0x4A,0xCC,0x24,0x96,0x3E,0x34,0x00,0x00,0x00,
             0x04,0x5B,0x30,0x82,0x04,0x57,0x30,0x82,0x02,0x3F,0xA0,0x03,0x02,0x01,0x02,0x02,
             0x11,0x00,0xB0,0x57,0x3E,0x91,0x73,0x97,0x27,0x70,0xDB,0xB4,0x87,0xCB,0x3A,0x45,
             0x2B,0x38,0x30,0x0D,0x06,0x09,0x2A,0x86,0x48,0x86,0xF7,0x0D,0x01,0x01,0x0B,0x05,
             0x00,0x30,0x4F,0x31,0x0B,0x30,0x09,0x06,0x03,0x55,0x04,0x06,0x13,0x02,0x55,0x53,
             0x31,0x29,0x30,0x27,0x06,0x03,0x55,0x04,0x0A,0x13,0x20,0x49,0x6E,0x74,0x65,0x72,
             0x6E,0x65,0x74,0x20,0x53,0x65,0x63,0x75,0x72,0x69,0x74,0x79,0x20,0x52,0x65,0x73,
             0x65,0x61,0x72,0x63,0x68,0x20,0x47,0x72,0x6F,0x75,0x70,0x31,0x15,0x30,0x13,0x06,
             0x03,0x55,0x04,0x03,0x13,0x0C,0x49,0x53,0x52,0x47,0x20,0x52,0x6F,0x6F,0x74,0x20,
             0x58,0x31,0x30,0x1E,0x17,0x0D,0x32,0x34,0x30,0x33,0x31,0x33,0x30,0x30,0x30,0x30,
             0x30,0x30,0x5A,0x17,0x0D,0x32,0x37,0x30,0x33,0x31,0x32,0x32,0x33,0x35,0x39,0x35,
             0x39,0x5A,0x30,0x32,0x31,0x0B,0x30,0x09,0x06,0x03,0x55,0x04,0x06,0x13,0x02,0x55,
             0x53,0x31,0x16,0x30,0x14,0x06,0x03,0x55,0x04,0x0A,0x13,0x0D,0x4C,0x65,0x74,0x27,
             0x73,0x20,0x45,0x6E,0x63,0x72,0x79,0x70,0x74,0x31,0x0B,0x30,0x09,0x06,0x03,0x55,
             0x04,0x03,0x13,0x02,0x45,0x36,0x30,0x76,0x30,0x10,0x06,0x07,0x2A,0x86,0x48,0xCE,
             0x3D,0x02,0x01,0x06,0x05,0x2B,0x81,0x04,0x00,0x22,0x03,0x62,0x00,0x04,0xD9,0xF1,
             0x9E,0x46,0x87,0xF8,0x21,0x71,0x60,0xA8,0x26,0xEB,0xA3,0xFA,0xB9,0xEA,0xDA,0x1D,
             0xB9,0x12,0xA7,0xD4,0x26,0xD9,0x51,0x14,0xB1,0x61,0x7C,0x75,0x96,0xBF,0x22,0x0B,
             0x39,0x1F,0xD5,0xBE,0xD1,0x0A,0x46,0xAA,0x2D,0x3C,0x4A,0x09,0x84,0x2E,0xBE,0x40,
             0x95,0x55,0xE9,0x19,0x40,0x37,0x66,0x75,0xED,0x32,0x4E,0x77,0x04,0x49,0xF8,0x70,
             0x7B,0xC3,0x18,0xE7,0xCE,0xF7,0x71,0x10,0xFE,0xAC,0x74,0xD8,0x00,0xD4,0xED,0x6D,
             0x1C,0x73,0x16,0x33,0x10,0x9C,0x3A,0xB2,0xEA,0x6C,0x62,0xF4,0xBD,0xB8,0xA3,0x81,
             0xF8,0x30,0x81,0xF5,0x30,0x0E,0x06,0x03,0x55,0x1D,0x0F,0x01,0x01,0xFF,0x04,0x04,
             0x03,0x02,0x01,0x86,0x30,0x1D,0x06,0x03,0x55,0x1D,0x25,0x04,0x16,0x30,0x14,0x06,
             0x08,0x2B,0x06,0x01,0x05,0x05,0x07,0x03,0x02,0x06,0x08,0x2B,0x06,0x01,0x05,0x05,
             0x07,0x03,0x01,0x30,0x12,0x06,0x03,0x55,0x1D,0x13,0x01,0x01,0xFF,0x04,0x08,0x30,
             0x06,0x01,0x01,0xFF,0x02,0x01,0x00,0x30,0x1D,0x06,0x03,0x55,0x1D,0x0E,0x04,0x16,
             0x04,0x14,0x93,0x27,0x46,0x98,0x03,0xA9,0x51,0x68,0x8E,0x98,0xD6,0xC4,0x42,0x48,
             0xDB,0x23,0xBF,0x58,0x94,0xD2,0x30,0x1F,0x06,0x03,0x55,0x1D,0x23,0x04,0x18,0x30,
             0x16,0x80,0x14,0x79,0xB4,0x59,0xE6,0x7B,0xB6,0xE5,0xE4,0x01,0x73,0x80,0x08,0x88,
             0xC8,0x1A,0x58,0xF6,0xE9,0x9B,0x6E,0x30,0x32,0x06,0x08,0x2B,0x06,0x01,0x05,0x05,
             0x07,0x01,0x01,0x04,0x26,0x30,0x24,0x30,0x22,0x06,0x08,0x2B,0x06,0x01,0x05,0x05,
             0x07,0x30,0x02,0x86,0x16,0x68,0x74,0x74,0x70,0x3A,0x2F,0x2F,0x78,0x31,0x2E,0x69,
             0x2E,0x6C,0x65,0x6E,0x63,0x72,0x2E,0x6F,0x72,0x67,0x2F,0x30,0x13,0x06,0x03,0x55,
             0x1D,0x20,0x04,0x0C,0x30,0x0A,0x30,0x08,0x06,0x06,0x67,0x81,0x0C,0x01,0x02,0x01,
             0x30,0x27,0x06,0x03,0x55,0x1D,0x1F,0x04,0x20,0x30,0x1E,0x30,0x1C,0xA0,0x1A,0xA0,
             0x18,0x86,0x16,0x68,0x74,0x74,0x70,0x3A,0x2F,0x2F,0x78,0x31,0x2E,0x63,0x2E,0x6C,
             0x65,0x6E,0x63,0x72,0x2E,0x6F,0x72,0x67,0x2F,0x30,0x0D,0x06,0x09,0x2A,0x86,0x48,
             0x86,0xF7,0x0D,0x01,0x01,0x0B,0x05,0x00,0x03,0x82,0x02,0x01,0x00,0x7D,0x8B,0x7B,
             0x4A,0x20,0x35,0xB2,0x05,0x86,0x08,0x8A,0x6E,0x9E,0x4E,0x3A,0xAF,0x80,0x04,0xC4,
             0x84,0x5C,0x33,0x19,0x0A,0x81,0x48,0x4D,0x96,0xBA,0xEF,0xD4,0x1D,0xB5,0x84,0xE6,
             0x97,0x37,0xFE,0x66,0x88,0x4F,0x8B,0x39,0x36,0xEB,0x72,0x65,0x3F,0x33,0xDC,0xAF,
             0x0B,0xA3,0x15,0x63,0xBD,0xF4,0x18,0xD1,0x68,0x2F,0xC2,0x21,0x27,0xC8,0xFC,0xBE,
             0xB3,0x8B,0xA4,0xC6,0x36,0xD8,0xE3,0xFA,0x6D,0xA4,0xB5,0x93,0xD6,0x0C,0xAE,0xD0,
             0xD3,0x97,0x02,0x47,0xA0,0x66,0xF2,0xD3,0x84,0xE1,0x4D,0x47,0x81,0x0E,0x4B,0x12,
             0xF5,0x18,0xAE,0x1E,0xF8,0x9C,0x66,0xA0,0x5E,0x75,0x07,0x48,0x17,0xAE,0x69,0x66,
             0xE8,0x69,0x78,0x37,0x06,0x05,0xC2,0xE2,0x61,0xAB,0x10,0xAF,0xF1,0x0E,0xE6,0x0C,
             0x71,0xB4,0xBC,0x93,0x9A,0x0B,0x07,0x48,0xE5,0x52,0x05,0xC1,0x4E,0x9F,0xD9,0x60,
             0xBF,0xB2,0xC4,0x08,0xFA,0xBD,0x8B,0xB9,0x9F,0x1F,0x79,0xA9,0xC6,0x0A,0xD1,0x29,
             0x2C,0x47,0xA4,0xEA,0x19,0xD0,0xA5,0xCC,0x70,0x1F,0xA1,0x1E,0xEB,0xE5,0x92,0x51,
             0xE7,0xB6,0xF7,0x08,0xD2,0x63,0x0C,0x43,0x49,0xA1,0x62,0x3E,0xAA,0xB4,0xC1,0x52,
             0xB6,0x41,0x75,0x46,0x90,0x86,0xDC,0x83,0xDD,0x23,0x0A,0x55,0x09,0x0A,0xAE,0xF0,
             0x65,0x7B,0xB3,0xCB,0x9B,0x92,0x74,0x73,0xB3,0xED,0xC2,0xFC,0x19,0xB5,0xF5,0x11,
             0x4E,0xA2,0x23,0xE9,0x0E,0x4C,0x2F,0xC8,0xD7,0xEF,0x99,0x0D,0x78,0x5E,0x4C,0xAA,
             0xA8,0xA2,0xB9,0xA1,0x9F,0x33,0x84,0x3D,0xF6,0x90,0x54,0x50,0x93,0x16,0xBC,0xB9,
             0x94,0xAE,0x87,0x86,0x93,0x22,0x61,0x71,0x92,0x7B,0xB7,0xF7,0x06,0x81,0xC4,0x84,
             0x57,0x13,0x88,0xCA,0xC6,0x50,0x26,0x41,0xCE,0x10,0x8C,0x56,0x68,0xAB,0x52,0xA6,
             0x42,0xA4,0x20,0xD0,0x9F,0xF5,0x24,0x5F,0x11,0x94,0x5B,0xC9,0x6A,0xCD,0x55,0x72,
             0x32,0xEF,0x62,0x5B,0xD4,0x07,0x6B,0x7A,0x9E,0x93,0xBA,0xA1,0x08,0xC1,0xDE,0x5F,
             0x8F,0x35,0xFD,0x03,0xA5,0x01,0xFB,0x89,0x4C,0x77,0x5B,0x3E,0x40,0x8D,0x00,0xA2,
             0xE8,0xBD,0xB9,0x16,0x3C,0x84,0xD3,0xAA,0xBA,0x05,0x9F,0xD0,0x96,0x6B,0x58,0x76,
             0x5F,0xFC,0x65,0x86,0xA8,0xE1,0x24,0x6A,0x3C,0x4B,0x3F,0xE9,0xC0,0x22,0x17,0xE4,
             0x1F,0xE7,0x38,0x36,0x52,0x46,0x96,0xB4,0x3A,0x61,0x97,0x52,0xCA,0x32,0xE4,0xCD,
             0x2E,0x8B,0x6F,0xB1,0x7F,0x7D,0x1C,0xFE,0xBD,0x57,0x67,0xDA,0x37,0x27,0xA0,0xA1,
             0xD4,0x34,0x2F,0x24,0xC0,0xA6,0xBF,0xEF,0x4F,0x4D,0x58,0x3C,0x4E,0x3A,0xBC,0xDB,
             0x03,0x2E,0x02,0xBE,0xE1,0xC2,0xFA,0x4E,0xBC,0xC2,0xFD,0xAE,0x16,0x72,0x61,0x79,
             0x49,0x12,0x7D,0xDF,0xCC,0xEB,0xBF,0xF7,0x6E,0x24,0x72,0xD7,0x40,0x89,0x2E,0xE6,
             0xFD,0x3E,0x13,0x03,0xB2,0xE7,0xD1,0xDD,0x9B,0x43,0xD3,0xFC,0x4A,0xFF,0xF3,0x87,
             0x43,0x57,0x40,0x92,0x8D,0xD4,0x7F,0xD9,0x7B,0x99,0x33,0x79,0x29,0xCA,0xC4,0x8A,
             0x2E,0x00,0xF5,0x70,0xA8,0x83,0x03,0xE2,0x11,0x82,0xE3,0x83,0x0B,0x17,0xCE,0xF5,
             0xCC,0x98,0x22,0x0E,0x3A,0xBF,0xD9,0x85,0x98,0x1B,0xF2,0x1F,0x4E,0x00,0x00,0x00,
             0x05,0x64,0x30,0x82,0x05,0x60,0x30,0x82,0x04,0x48,0xA0,0x03,0x02,0x01,0x02,0x02,
             0x10,0x40,0x01,0x77,0x21,0x37,0xD4,0xE9,0x42,0xB8,0xEE,0x76,0xAA,0x3C,0x64,0x0A,
             0xB7,0x30,0x0D,0x06,0x09,0x2A,0x86,0x48,0x86,0xF7,0x0D,0x01,0x01,0x0B,0x05,0x00,
             0x30,0x3F,0x31,0x24,0x30,0x22,0x06,0x03,0x55,0x04,0x0A,0x13,0x1B,0x44,0x69,0x67,
             0x69,0x74,0x61,0x6C,0x20,0x53,0x69,0x67,0x6E,0x61,0x74,0x75,0x72,0x65,0x20,0x54,
             0x72,0x75,0x73,0x74,0x20,0x43,0x6F,0x2E,0x31,0x17,0x30,0x15,0x06,0x03,0x55,0x04,
             0x03,0x13,0x0E,0x44,0x53,0x54,0x20,0x52,0x6F,0x6F,0x74,0x20,0x43,0x41,0x20,0x58,
             0x33,0x30,0x1E,0x17,0x0D,0x32,0x31,0x30,0x31,0x32,0x30,0x31,0x39,0x31,0x34,0x30,
             0x33,0x5A,0x17,0x0D,0x32,0x34,0x30,0x39,0x33,0x30,0x31,0x38,0x31,0x34,0x30,0x33,
             0x5A,0x30,0x4F,0x31,0x0B,0x30,0x09,0x06,0x03,0x55,0x04,0x06,0x13,0x02,0x55,0x53,
             0x31,0x29,0x30,0x27,0x06,0x03,0x55,0x04,0x0A,0x13,0x20,0x49,0x6E,0x74,0x65,0x72,
             0x6E,0x65,0x74,0x20,0x53,0x65,0x63,0x75,0x72,0x69,0x74,0x79,0x20,0x52,0x65,0x73,
             0x65,0x61,0x72,0x63,0x68,0x20,0x47,0x72,0x6F,0x75,0x70,0x31,0x15,0x30,0x13,0x06,
             0x03,0x55,0x04,0x03,0x13,0x0C,0x49,0x53,0x52,0x47,0x20,0x52,0x6F,0x6F,0x74,0x20,
             0x58,0x31,0x30,0x82,0x02,0x22,0x30,0x0D,0x06,0x09,0x2A,0x86,0x48,0x86,0xF7,0x0D,
             0x01,0x01,0x01,0x05,0x00,0x03,0x82,0x02,0x0F,0x00,0x30,0x82,0x02,0x0A,0x02,0x82,
             0x02,0x01,0x00,0xAD,0xE8,0x24,0x73,0xF4,0x14,0x37,0xF3,0x9B,0x9E,0x2B,0x57,0x28,
             0x1C,0x87,0xBE,0xDC,0xB7,0xDF,0x38,0x90,0x8C,0x6E,0x3C,0xE6,0x57,0xA0,0x78,0xF7,
             0x75,0xC2,0xA2,0xFE,0xF5,0x6A,0x6E,0xF6,0x00,0x4F,0x28,0xDB,0xDE,0x68,0x86,0x6C,
             0x44,0x93,0xB6,0xB1,0x63,0xFD,0x14,0x12,0x6B,0xBF,0x1F,0xD2,0xEA,0x31,0x9B,0x21,
             0x7E,0xD1,0x33,0x3C,0xBA,0x48,0xF5,0xDD,0x79,0xDF,0xB3,0xB8,0xFF,0x12,0xF1,0x21,
             0x9A,0x4B,0xC1,0x8A,0x86,0x71,0x69,0x4A,0x66,0x66,0x6C,0x8F,0x7E,0x3C,0x70,0xBF,
             0xAD,0x29,0x22,0x06,0xF3,0xE4,0xC0,0xE6,0x80,0xAE,0xE2,0x4B,0x8F,0xB7,0x99,0x7E,
             0x94,0x03,0x9F,0xD3,0x47,0x97,0x7C,0x99,0x48,0x23,0x53,0xE8,0x38,0xAE,0x4F,0x0A,
             0x6F,0x83,0x2E,0xD1,0x49,0x57,0x8C,0x80,0x74,0xB6,0xDA,0x2F,0xD0,0x38,0x8D,0x7B,
             0x03,0x70,0x21,0x1B,0x75,0xF2,0x30,0x3C,0xFA,0x8F,0xAE,0xDD,0xDA,0x63,0xAB,0xEB,
             0x16,0x4F,0xC2,0x8E,0x11,0x4B,0x7E,0xCF,0x0B,0xE8,0xFF,0xB5,0x77,0x2E,0xF4,0xB2,
             0x7B,0x4A,0xE0,0x4C,0x12,0x25,0x0C,0x70,0x8D,0x03,0x29,0xA0,0xE1,0x53,0x24,0xEC,
             0x13,0xD9,0xEE,0x19,0xBF,0x10,0xB3,0x4A,0x8C,0x3F,0x89,0xA3,0x61,0x51,0xDE,0xAC,
             0x87,0x07,0x94,0xF4,0x63,0x71,0xEC,0x2E,0xE2,0x6F,0x5B,0x98,0x81,0xE1,0x89,0x5C,
             0x34,0x79,0x6C,0x76,0xEF,0x3B,0x90,0x62,0x79,0xE6,0xDB,0xA4,0x9A,0x2F,0x26,0xC5,
             0xD0,0x10,0xE1,0x0E,0xDE,0xD9,0x10,0x8E,0x16,0xFB,0xB7,0xF7,0xA8,0xF7,0xC7,0xE5,
             0x02,0x07,0x98,0x8F,0x36,0x08,0x95,0xE7,0xE2,0x37,0x96,0x0D,0x36,0x75,0x9E,0xFB,
             0x0E,0x72,0xB1,0x1D,0x9B,0xBC,0x03,0xF9,0x49,0x05,0xD8,0x81,0xDD,0x05,0xB4,0x2A,
             0xD6,0x41,0xE9,0xAC,0x01,0x76,0x95,0x0A,0x0F,0xD8,0xDF,0xD5,0xBD,0x12,0x1F,0x35,
             0x2F,0x28,0x17,0x6C,0xD2,0x98,0xC1,0xA8,0x09,0x64,0x77,0x6E,0x47,0x37,0xBA,0xCE,
             0xAC,0x59,0x5E,0x68,0x9D,0x7F,0x72,0xD6,0x89,0xC5,0x06,0x41,0x29,0x3E,0x59,0x3E,
             0xDD,0x26,0xF5,0x24,0xC9,0x11,0xA7,0x5A,0xA3,0x4C,0x40,0x1F,0x46,0xA1,0x99,0xB5,
             0xA7,0x3A,0x51,0x6E,0x86,0x3B,0x9E,0x7D,0x72,0xA7,0x12,0x05,0x78,0x59,0xED,0x3E,
             0x51,0x78,0x15,0x0B,0x03,0x8F,0x8D,0xD0,0x2F,0x05,0xB2,0x3E,0x7B,0x4A,0x1C,0x4B,
             0x73,0x05,0x12,0xFC,0xC6,0xEA,0xE0,0x50,0x13,0x7C,0x43,0x93,0x74,0xB3,0xCA,0x74,
             0xE7,0x8E,0x1F,0x01,0x08,0xD0,0x30,0xD4,0x5B,0x71,0x36,0xB4,0x07,0xBA,0xC1,0x30,
             0x30,0x5C,0x48,0xB7,0x82,0x3B,0x98,0xA6,0x7D,0x60,0x8A,0xA2,0xA3,0x29,0x82,0xCC,
             0xBA,0xBD,0x83,0x04,0x1B,0xA2,0x83,0x03,0x41,0xA1,0xD6,0x05,0xF1,0x1B,0xC2,0xB6,
             0xF0,0xA8,0x7C,0x86,0x3B,0x46,0xA8,0x48,0x2A,0x88,0xDC,0x76,0x9A,0x76,0xBF,0x1F,
             0x6A,0xA5,0x3D,0x19,0x8F,0xEB,0x38,0xF3,0x64,0xDE,0xC8,0x2B,0x0D,0x0A,0x28,0xFF,
             0xF7,0xDB,0xE2,0x15,0x42,0xD4,0x22,0xD0,0x27,0x5D,0xE1,0x79,0xFE,0x18,0xE7,0x70,
             0x88,0xAD,0x4E,0xE6,0xD9,0x8B,0x3A,0xC6,0xDD,0x27,0x51,0x6E,0xFF,0xBC,0x64,0xF5,
             0x33,0x43,0x4F,0x02,0x03,0x01,0x00,0x01,0xA3,0x82,0x01,0x46,0x30,0x82,0x01,0x42,
             0x30,0x0F,0x06,0x03,0x55,0x1D,0x13,0x01,0x01,0xFF,0x04,0x05,0x30,0x03,0x01,0x01,
             0xFF,0x30,0x0E,0x06,0x03,0x55,0x1D,0x0F,0x01,0x01,0xFF,0x04,0x04,0x03,0x02,0x01,
             0x06,0x30,0x4B,0x06,0x08,0x2B,0x06,0x01,0x05,0x05,0x07,0x01,0x01,0x04,0x3F,0x30,
             0x3D,0x30,0x3B,0x06,0x08,0x2B,0x06,0x01,0x05,0x05,0x07,0x30,0x02,0x86,0x2F,0x68,
             0x74,0x74,0x70,0x3A,0x2F,0x2F,0x61,0x70,0x70,0x73,0x2E,0x69,0x64,0x65,0x6E,0x74,
             0x72,0x75,0x73,0x74,0x2E,0x63,0x6F,0x6D,0x2F,0x72,0x6F,0x6F,0x74,0x73,0x2F,0x64,
             0x73,0x74,0x72,0x6F,0x6F,0x74,0x63,0x61,0x78,0x33,0x2E,0x70,0x37,0x63,0x30,0x1F,
             0x06,0x03,0x55,0x1D,0x23,0x04,0x18,0x30,0x16,0x80,0x14,0xC4,0xA7,0xB1,0xA4,0x7B,
             0x2C,0x71,0xFA,0xDB,0xE1,0x4B,0x90,0x75,0xFF,0xC4,0x15,0x60,0x85,0x89,0x10,0x30,
             0x54,0x06,0x03,0x55,0x1D,0x20,0x04,0x4D,0x30,0x4B,0x30,0x08,0x06,0x06,0x67,0x81,
             0x0C,0x01,0x02,0x01,0x30,0x3F,0x06,0x0B,0x2B,0x06,0x01,0x04,0x01,0x82,0xDF,0x13,
             0x01,0x01,0x01,0x30,0x30,0x30,0x2E,0x06,0x08,0x2B,0x06,0x01,0x05,0x05,0x07,0x02,
             0x01,0x16,0x22,0x68,0x74,0x74,0x70,0x3A,0x2F,0x2F,0x63,0x70,0x73,0x2E,0x72,0x6F,
             0x6F,0x74,0x2D,0x78,0x31,0x2E,0x6C,0x65,0x74,0x73,0x65,0x6E,0x63,0x72,0x79,0x70,
             0x74,0x2E,0x6F,0x72,0x67,0x30,0x3C,0x06,0x03,0x55,0x1D,0x1F,0x04,0x35,0x30,0x33,
             0x30,0x31,0xA0,0x2F,0xA0,0x2D,0x86,0x2B,0x68,0x74,0x74,0x70,0x3A,0x2F,0x2F,0x63,
             0x72,0x6C,0x2E,0x69,0x64,0x65,0x6E,0x74,0x72,0x75,0x73,0x74,0x2E,0x63,0x6F,0x6D,
             0x2F,0x44,0x53,0x54,0x52,0x4F,0x4F,0x54,0x43,0x41,0x58,0x33,0x43,0x52,0x4C,0x2E,
             0x63,0x72,0x6C,0x30,0x1D,0x06,0x03,0x55,0x1D,0x0E,0x04,0x16,0x04,0x14,0x79,0xB4,
             0x59,0xE6,0x7B,0xB6,0xE5,0xE4,0x01,0x73,0x80,0x08,0x88,0xC8,0x1A,0x58,0xF6,0xE9,
             0x9B,0x6E,0x30,0x0D,0x06,0x09,0x2A,0x86,0x48,0x86,0xF7,0x0D,0x01,0x01,0x0B,0x05,
             0x00,0x03,0x82,0x01,0x01,0x00,0x0A,0x73,0x00,0x6C,0x96,0x6E,0xFF,0x0E,0x52,0xD0,
             0xAE,0xDD,0x8C,0xE7,0x5A,0x06,0xAD,0x2F,0xA8,0xE3,0x8F,0xBF,0xC9,0x0A,0x03,0x15,
             0x50,0xC2,0xE5,0x6C,0x42,0xBB,0x6F,0x9B,0xF4,0xB4,0x4F,0xC2,0x44,0x88,0x08,0x75,
             0xCC,0xEB,0x07,0x9B,0x14,0x62,0x6E,0x78,0xDE,0xEC,0x27,0xBA,0x39,0x5C,0xF5,0xA2,
             0xA1,0x6E,0x56,0x94,0x70,0x10,0x53,0xB1,0xBB,0xE4,0xAF,0xD0,0xA2,0xC3,0x2B,0x01,
             0xD4,0x96,0xF4,0xC5,0x20,0x35,0x33,0xF9,0xD8,0x61,0x36,0xE0,0x71,0x8D,0xB4,0xB8,
             0xB5,0xAA,0x82,0x45,0x95,0xC0,0xF2,0xA9,0x23,0x28,0xE7,0xD6,0xA1,0xCB,0x67,0x08,
             0xDA,0xA0,0x43,0x2C,0xAA,0x1B,0x93,0x1F,0xC9,0xDE,0xF5,0xAB,0x69,0x5D,0x13,0xF5,
             0x5B,0x86,0x58,0x22,0xCA,0x4D,0x55,0xE4,0x70,0x67,0x6D,0xC2,0x57,0xC5,0x46,0x39,
             0x41,0xCF,0x8A,0x58,0x83,0x58,0x6D,0x99,0xFE,0x57,0xE8,0x36,0x0E,0xF0,0x0E,0x23,
             0xAA,0xFD,0x88,0x97,0xD0,0xE3,0x5C,0x0E,0x94,0x49,0xB5,0xB5,0x17,0x35,0xD2,0x2E,
             0xBF,0x4E,0x85,0xEF,0x18,0xE0,0x85,0x92,0xEB,0x06,0x3B,0x6C,0x29,0x23,0x09,0x60,
             0xDC,0x45,0x02,0x4C,0x12,0x18,0x3B,0xE9,0xFB,0x0E,0xDE,0xDC,0x44,0xF8,0x58,0x98,
             0xAE,0xEA,0xBD,0x45,0x45,0xA1,0x88,0x5D,0x66,0xCA,0xFE,0x10,0xE9,0x6F,0x82,0xC8,
             0x11,0x42,0x0D,0xFB,0xE9,0xEC,0xE3,0x86,0x00,0xDE,0x9D,0x10,0xE3,0x38,0xFA,0xA4,
             0x7D,0xB1,0xD8,0xE8,0x49,0x82,0x84,0x06,0x9B,0x2B,0xE8,0x6B,0x4F,0x01,0x0C,0x38,
             0x77,0x2E,0xF9,0xDD,0xE7,0x39,0x00,0x00,0x00,0x01,0x95,0x30,0x82,0x01,0x91,0x30,
             0x82,0x01,0x37,0xA0,0x03,0x02,0x01,0x02,0x02,0x08,0x45,0x80,0xDB,0x15,0xCC,0x15,
             0xC2,0x48,0x30,0x0A,0x06,0x08,0x2A,0x86,0x48,0xCE,0x3D,0x04,0x03,0x02,0x30,0x1B,
             0x31,0x19,0x30,0x17,0x06,0x03,0x55,0x04,0x03,0x0C,0x10,0x48,0x53,0x20,0x44,0x48,
             0x3A,0x20,0x53,0x65,0x63,0x70,0x32,0x35,0x36,0x72,0x31,0x30,0x1E,0x17,0x0D,0x32,
             0x35,0x30,0x34,0x31,0x36,0x30,0x34,0x30,0x31,0x34,0x35,0x5A,0x17,0x0D,0x32,0x35,
             0x30,0x35,0x31,0x36,0x31,0x36,0x30,0x31,0x34,0x35,0x5A,0x30,0x29,0x31,0x27,0x30,
             0x25,0x06,0x03,0x55,0x04,0x03,0x0C,0x1E,0x49,0x50,0x2C,0x20,0x70,0x6F,0x72,0x74,
             0x3A,0x20,0x31,0x38,0x35,0x2E,0x32,0x31,0x34,0x2E,0x39,0x37,0x2E,0x32,0x34,0x36,
             0x3A,0x32,0x34,0x31,0x38,0x34,0x30,0x59,0x30,0x13,0x06,0x07,0x2A,0x86,0x48,0xCE,
             0x3D,0x02,0x01,0x06,0x08,0x2A,0x86,0x48,0xCE,0x3D,0x03,0x01,0x07,0x03,0x42,0x00,
             0x04,0x25,0x98,0xDB,0x7B,0x19,0xFD,0x4D,0x11,0x76,0x2D,0x65,0x75,0xA5,0xB0,0x62,
             0xF0,0xAD,0x69,0x80,0xF8,0xB8,0x99,0xE4,0x3A,0xD3,0x12,0x67,0xA4,0xE5,0xE2,0x3A,
             0xB6,0xBD,0xCC,0x4B,0x29,0x96,0x91,0xBA,0x07,0xC5,0x35,0x9E,0xEF,0xFF,0xE9,0x59,
             0xD0,0x80,0xAD,0x99,0xB6,0x1B,0xF0,0xD3,0xEA,0xCB,0x1A,0x87,0xAC,0xA8,0x7C,0xAA,
             0x48,0xA3,0x57,0x30,0x55,0x30,0x0E,0x06,0x03,0x55,0x1D,0x0F,0x01,0x01,0xFF,0x04,
             0x04,0x03,0x02,0x07,0x80,0x30,0x0C,0x06,0x03,0x55,0x1D,0x13,0x01,0x01,0xFF,0x04,
             0x02,0x30,0x00,0x30,0x1D,0x06,0x03,0x55,0x1D,0x25,0x04,0x16,0x30,0x14,0x06,0x08,
             0x2B,0x06,0x01,0x05,0x05,0x07,0x03,0x01,0x06,0x08,0x2B,0x06,0x01,0x05,0x05,0x07,
             0x03,0x02,0x30,0x16,0x06,0x03,0x55,0x1D,0x11,0x04,0x0F,0x30,0x0D,0x82,0x0B,0x74,
             0x6C,0x73,0x31,0x33,0x2E,0x31,0x64,0x2E,0x70,0x77,0x30,0x0A,0x06,0x08,0x2A,0x86,
             0x48,0xCE,0x3D,0x04,0x03,0x02,0x03,0x48,0x00,0x30,0x45,0x02,0x20,0x59,0xE0,0x2A,
             0xDC,0x09,0x30,0x3E,0x7A,0xB7,0x99,0xE3,0xF8,0x47,0xD2,0x87,0xE4,0x20,0x6E,0x75,
             0xBF,0xB3,0xDF,0xF8,0x51,0x8D,0x36,0x69,0x6F,0x57,0x6E,0xAA,0xD2,0x02,0x21,0x00,
             0xF5,0x0F,0xE6,0x24,0x41,0x66,0x1F,0x7F,0xA6,0x1D,0x83,0xD4,0x98,0x64,0x76,0x37,
             0x2A,0xAC,0x8F,0x1C,0x43,0x0B,0x43,0x55,0xD3,0xD0,0xCB,0x46,0xAF,0xEF,0x29,0x08,
             0x00,0x00
        };

        var serverCertificateVerifyBytes = new byte[] {
             0x05,0x03,0x00,0x66,0x30,0x64,0x02,0x30,0x1A,0x1F,0xEF,0x1E,0x5F,0xA7,0x17,0xDD,
             0x6F,0xC4,0x89,0x34,0x72,0x58,0xFC,0x2B,0xCC,0x15,0x00,0x42,0x97,0x00,0x64,0xD3,
             0xF5,0x2C,0x20,0xCF,0x06,0xC8,0x9B,0x47,0xFB,0x34,0x09,0x89,0x6D,0xB6,0x9D,0x4B,
             0x46,0x02,0x01,0xC5,0x3A,0x4D,0xD0,0xC7,0x02,0x30,0x49,0x0B,0x66,0xAC,0x76,0x5A,
             0x58,0xBD,0xE2,0x80,0x75,0xA6,0x88,0xC3,0x46,0x26,0x6E,0x03,0xAF,0x1F,0x5E,0x08,
             0x0A,0x98,0xBC,0x65,0xBE,0x8C,0x5B,0xF1,0xC0,0x92,0x68,0x6A,0x01,0x74,0xF1,0x50,
             0x9C,0x00,0xFA,0x80,0x9B,0x61,0xC3,0xD2,0x80,0x6E
        };

        var serverFinishedBytes = new byte[] {
            0x09,0x9D,0xFC,0xAE,0xE9,0xDA,0xF0,0xB9,0xA3,0xAC,0x26,0x4C,0x47,0x91,0xC8,0xE3,
            0xEE,0x5F,0x8E,0x69,0x78,0x27,0x58,0xC9,0xD3,0x3C,0xB3,0x61,0x18,0x70,0xA2,0x69
        };

        var serverHandshakeHashBytes = new byte[] {
            0x52,0x50,0x01,0x3A,0xBA,0x0E,0x13,0x2D,0x0D,0xC3,0xA4,0xA0,0xF2,0xB7,0x6F,0x65,
            0xE4,0xC6,0x1A,0xBE,0xBF,0x02,0xCF,0x90,0x88,0x66,0x6B,0x74,0x0F,0x21,0x72,0x61
        };

        var hmacServerKeyBytes = new byte[] {
            0x93,0x8C,0x6D,0x94,0x0F,0x93,0x6B,0x31,0x62,0x06,0x47,0x67,0xEE,0x42,0xB5,0x12,
            0x01,0x1F,0x15,0x88,0x28,0x1E,0xD1,0xA4,0xCE,0x3D,0x7A,0x3D,0xBC,0x21,0xAA,0xDF
        };

        var finalClientHandshakeHashBytes = new byte[] {
            0x5B,0x40,0xC3,0xEB,0x44,0x17,0x1C,0xCA,0x26,0x27,0x39,0x7D,0xC2,0x46,0x47,0xEC,
            0x03,0x32,0x23,0x3F,0xA6,0xE0,0xD4,0xD4,0xC7,0xE7,0xCA,0x5A,0xF6,0x96,0xDA,0x9D
        };

        var hmacClientKeyBytes = new byte[] {
            0x09,0x70,0xEE,0x91,0xE0,0x1F,0x58,0x64,0x94,0x62,0x5F,0x75,0xA9,0xEF,0x7A,0xBE,
            0x3F,0xCE,0x46,0x75,0x9B,0x5A,0xB7,0xAF,0x96,0xBE,0xDA,0xCA,0xA9,0xE0,0x31,0x90
        };

        var localFinishedBytes = new byte[] {
            0x97,0x82,0x8A,0x53,0x70,0x11,0x98,0x1F,0x00,0xAD,0x81,0x30,0x83,0x13,0xC0,0xEC,
            0xF8,0xC5,0xC1,0x25,0x03,0x23,0x01,0xC2,0xFC,0xC3,0xF2,0x6C,0x71,0xE0,0xB5,0x1E
        };

        var clientApKey = new byte[] {
             0x00,0x03,0x94,0x85,0x25,0x03,0x41,0xDE,0x29,0x9A,0xA4,0x3D,0x00,0x65,0x79,0xCD
        };

        var serverApKey = new byte[] {
            0x63,0xC3,0x05,0x50,0x89,0x45,0xA3,0xB4,0x9A,0xFD,0x57,0xEE,0x38,0x40,0x41,0x27
        };

        if(splitCertificateMessage) {
            // Simulate the reception of the "Certificate" message
            // split in fragments of 100 bytes each.

            List<byte[]> certificateMessageRecords = new();
            var certificateMessageParts = certificateBytes.Chunk(100).ToArray();
            var firstPart = certificateMessageParts.First();
            certificateMessageRecords.Add(
                [
                    TLS_RECORD_TYPE_HANDSHAKE,
                    3, 3,
                    (byte)((firstPart.Length+4) >> 8),
                    (byte)((firstPart.Length+4) & 0xFF),
                    11, //"Certificate"
                    0,
                    (byte)((certificateBytes.Length) >> 8),
                    (byte)((certificateBytes.Length) & 0xFF),
                    ..firstPart
                ]
            );
            foreach(var part in certificateMessageParts.Skip(1)) {
                certificateMessageRecords.Add([
                    TLS_RECORD_TYPE_HANDSHAKE,
                    3, 3,
                    (byte)((part.Length) >> 8),
                    (byte)((part.Length) & 0xFF),
                    ..part
                ]);
            }

            ReceivedTcpData = [
                RecordFromHandshakeMessage((byte)HandshakeType.ServerHello, serverHelloBytes),
                RecordFromHandshakeMessage((byte)HandshakeType.EncryptedExtensions, encryptedExtensionsBytes),
                ..certificateMessageRecords,
                RecordFromHandshakeMessage((byte)HandshakeType.CertificateVerify, serverCertificateVerifyBytes),
                RecordFromHandshakeMessage((byte)HandshakeType.Finished, serverFinishedBytes)
            ];
        }
        else {
            ReceivedTcpData = [
                RecordFromHandshakeMessage((byte)HandshakeType.ServerHello, serverHelloBytes),
                RecordFromHandshakeMessage((byte)HandshakeType.EncryptedExtensions, encryptedExtensionsBytes),
                RecordFromHandshakeMessage((byte)HandshakeType.Certificate, certificateBytes),
                RecordFromHandshakeMessage((byte)HandshakeType.CertificateVerify, serverCertificateVerifyBytes),
                RecordFromHandshakeMessage((byte)HandshakeType.Finished, serverFinishedBytes)
            ];
        }

        watcher
            .BeforeFetchingInstructionAt("CLIENT_HELLO.INIT")
            .Do(watcher => {
                WriteToMemory(symbols["CLIENT_HELLO.MESSAGE"], clientHelloBytes);
                WriteWordToMemory(symbols["CLIENT_HELLO.MESSAGE_HEADER"] + 2, (ushort)clientHelloBytes.Length, highEndian: true);
                WriteWordToMemory(symbols["CLIENT_HELLO.SIZE"], (ushort)clientHelloBytes.Length);
                Z80.Registers.HL = symbols["CLIENT_HELLO.MESSAGE"].ToShort();
                Z80.Registers.BC = clientHelloBytes.Length.ToShort();
            })
            .ExecuteRet();

        byte[] encryptedContent = null;
        byte encryptedContentType = 0;
        byte[] fakeAuthTag = [1, 2, 3];
        watcher
            .BeforeFetchingInstructionAt("RECORD_ENCRYPTION.ENCRYPT")
            .Do(watcher => {
                encryptedContentType = Z80.Registers.A;
                encryptedContent = ReadFromMemory(Z80.Registers.HL.ToUShort(), Z80.Registers.BC.ToUShort());

                // Bypass encryption and add a fake auth tag
                WriteToMemory(Z80.Registers.DE.ToUShort(), encryptedContent);
                WriteToMemory(Z80.Registers.DE.ToUShort() + Z80.Registers.BC.ToUShort(), fakeAuthTag);
                Z80.Registers.BC += (short)fakeAuthTag.Length;
            })
            .ExecuteRet();

        RunInit();
        Run("TLS_CONNECTION.UPDATE"); //Sends ClientHello
        Run("TLS_CONNECTION.UPDATE"); //Receives ServerHello
        Run("TLS_CONNECTION.UPDATE"); //Receives EncryptedExtensions

        if(splitCertificateMessage) {
            var certificateMessageParts = certificateBytes.Chunk(100).ToArray();
            // Receive all the records that build up the Certificate message
            for(var i=0; i<certificateMessageParts.Length; i++) Run("TLS_CONNECTION.UPDATE");
        }
        else {
            Run("TLS_CONNECTION.UPDATE"); //Receives Certificate
        }
        Run("TLS_CONNECTION.UPDATE"); //Receives CertificateVerify
        tcpDataSent.Clear();
        Run("TLS_CONNECTION.UPDATE"); //Receives Finished

        var x = Z80.Memory[symbols["TLS_CONNECTION.ERROR_CODE"]];
        var y = Z80.Memory[symbols["TLS_CONNECTION.SUB_ERROR_CODE"]];

        AssertByteInMemory("TLS_CONNECTION.STATE", STATE_ESTABLISHED);
        AssertA(STATE_ESTABLISHED);
        AssertByteInMemory("TLS_CONNECTION.FLAGS", 3); // HAS_KEYS + CERTIFICATE_RECEIVED

        AssertMemoryContents("HKDF.CLIENT_KEY", clientApKey);
        AssertMemoryContents("HKDF.SERVER_KEY", serverApKey);

        byte[] finishedMessage = [
            (byte)HandshakeType.Finished,
            0, 0, (byte)localFinishedBytes.Length,
            ..localFinishedBytes,
        ];

        byte[] expectedTcpDataSent = [
            TLS_RECORD_TYPE_CHANGE_CIHPER_SPEC,
            3, 3,
            0, 1, //Record length
            1,

            TLS_RECORD_TYPE_APP_DATA,
            3, 3,
            0, (byte)(finishedMessage.Length + fakeAuthTag.Length), //Record length
            ..finishedMessage,
            ..fakeAuthTag
        ];

        Assert.That(tcpDataSent, Is.EqualTo(expectedTcpDataSent));
        Assert.That(encryptedContent, Is.EqualTo(finishedMessage));
        Assert.That(encryptedContentType, Is.EqualTo(TLS_RECORD_TYPE_HANDSHAKE));
    }

    [Test]
    public void TestNonCertificateSplitMessageReceived()
    {
        ReceivedTcpData = [
            [
                TLS_RECORD_TYPE_HANDSHAKE,
                3, 3,
                0, 8, //Record length
                15, //"Certificate verify"
                0, 0x5, 0x34, //Total Size=0x0534
                1, 2, 3, 4
            ]
        ];

        RunInit();
        Run("TLS_CONNECTION.UPDATE"); //Sends ClientHello
        Run("TLS_CONNECTION.UPDATE"); //Receives certificate verify

        AssertA(STATE_LOCALLY_CLOSED);
        AssertByteInMemory("TLS_CONNECTION.ERROR_CODE", symbols["TLS_CONNECTION.ERROR_CODE.UNSUPPORTED_SPLIT_HANDSHAKE_MESSAGE"]);
        AssertByteInMemory("TLS_CONNECTION.SUB_ERROR_CODE", 15);
        AssertByteInMemory("TLS_CONNECTION.ALERT_SENT", 80); //INTERNAL_ERROR
    }

    [Test]
    public void TestCompareBlock()
    {
        WriteToMemory(0x8000, [1, 2, 3, 4, 5]);
        WriteToMemory(0x9000, [1, 2, 3, 4, 5]);
        Z80.Registers.HL = 0x8000.ToShort();
        Z80.Registers.DE = 0x9000.ToShort();
        Z80.Registers.BC = 5;
        Run("TLS_CONNECTION.COMPARE_BLOCK");
        Assert.That(Z80.Registers.ZF.Value, Is.EqualTo(1));

        Z80.Memory[0x9004] = 34;
        Z80.Registers.HL = 0x8000.ToShort();
        Z80.Registers.DE = 0x9000.ToShort();
        Z80.Registers.BC = 5;
        Run("TLS_CONNECTION.COMPARE_BLOCK");
        Assert.That(Z80.Registers.ZF.Value, Is.EqualTo(0));
    }

    [Test]
    public void TestSha256()
    {
        WriteToMemory(0x8000, [1, 2, 3, 4, 5]);

        Z80.Registers.A = 0;
        Run("SHA256.RUN");

        Z80.Registers.A = 1;
        Z80.Registers.HL = 0x8000.ToShort();
        Z80.Registers.BC = 5;
        Run("SHA256.RUN");

        Run("SHA256.SAVE_STATE");
        Z80.Registers.A = 2;
        Z80.Registers.DE = 0x9000.ToShort();
        Run("SHA256.RUN");
        Run("SHA256.RESTORE_STATE");
        var actualHash = ReadFromMemory(0x9000, 32);
        var expectedHash = SHA256.HashData([1, 2, 3, 4, 5]);

        Assert.That(actualHash, Is.EqualTo(expectedHash));

        // Now let's try and continue hashing

        WriteToMemory(0x8000, [6, 7, 8, 9]);

        Z80.Registers.A = 1;
        Z80.Registers.HL = 0x8000.ToShort();
        Z80.Registers.BC = 4;
        Run("SHA256.RUN");

        Z80.Registers.A = 2;
        Z80.Registers.DE = 0x9000.ToShort();
        Run("SHA256.RUN");

        actualHash = ReadFromMemory(0x9000, 32);
        expectedHash = SHA256.HashData([1, 2, 3, 4, 5, 6, 7, 8, 9]);

        Assert.That(actualHash, Is.EqualTo(expectedHash));
    }

    private void RunInit(string serverName = null)
    {
        Z80.Registers.HL = 0x9000.ToShort();
        Z80.Registers.BC = 0x4000.ToShort();
        RunAsCall("RECORD_RECEIVER.INIT");

        if(serverName == null) {
            Z80.Registers.B = 0;
        }
        else { 
            var serverNameBytes = Encoding.ASCII.GetBytes(serverName);
            WriteToMemory(0xF000, serverNameBytes);
            Z80.Registers.HL = 0xF000.ToShort();
            Z80.Registers.B = (byte)serverNameBytes.Length;
        }
        RunAsCall("TLS_CONNECTION.INIT");
    }
}
